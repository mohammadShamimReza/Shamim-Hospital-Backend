// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Model
model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password      String
  phone         Int
  address       String?
  profile_image String?
  role          String
  appointments  Appointment[]

  Billing Billing[]

  @@map("user")
}

// Doctor Model
model Doctor {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  phone            Int
  address          String?
  profile_image    String?
  role             String
  designation      String?
  passingYear      String?
  appointmentSlots AppointmentSlot[]
  appointments     Appointment[]
  Service          Service?          @relation(fields: [serviceId], references: [id])
  serviceId        Int?

  @@map("doctor")
}

model Inventory {
  id           Int      @id @default(autoincrement())
  itemName     String
  quantity     Int
  price        Int
  category     String // e.g., Medicine, Equipment, Consumables
  purchaseDate String
  status       String   @default("Available") // Available, In Use, Damaged
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Asset {
  id           Int      @id @default(autoincrement())
  name         String
  serialNumber String
  purchaseDate DateTime
  status       String   @default("Operational") // Operational, Under Maintenance, Out of Service
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Pharmacy {
  id            Int      @id @default(autoincrement())
  name          String
  stockQuantity Int
  unitPrice     Float
  image         String?
  expiryDate    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


  PharmacyOnAppointment PharmacyOnAppointment[]
}


model Laboratory {
  id            Int      @id @default(autoincrement())
  testName      String
  price         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

    LabAppointment LabAppointment[]
}

model LabAppointment {
  id            Int      @id @default(autoincrement())
  laboratoryId  Int
  appointmentId Int
  testDate      String?
  result        String?
  status        String   @default("Pending") // Pending, Completed, InProgress
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  laboratory    Laboratory @relation(fields: [laboratoryId], references: [id])
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model Diagnostic {
  id             Int      @id @default(autoincrement())
  diagnosticName String
  price          Int

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  DiagnosticAppointment DiagnosticAppointment[]

}

model DiagnosticAppointment {
  id              Int       @id @default(autoincrement())
  diagnosticId    Int
  appointmentId   Int
  result          String?   // Appointment-specific result
  status          String?     @default("Pending") // e.g., Pending, Completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  diagnostic      Diagnostic  @relation(fields: [diagnosticId], references: [id])
  appointment     Appointment @relation(fields: [appointmentId], references: [id])
}

model Billing {
  id            Int      @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  paidAmount    Float
  dueAmount     Float
  appointmentId Int?
  paymentStatus String   @default("Unpaid") // Paid, Unpaid, Partially Paid
  invoiceDate   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
}

model Finance {
  id              Int      @id @default(autoincrement())
  transactionType String // Revenue, Expense
  amount          Float
  description     String
  department      String
  transactionDate DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Nurse Model
model Nurse {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  password      String
  address       String?
  profile_image String?
  phone         Int
  role          String
  roomId        Int?
  room          Room?   @relation(fields: [roomId], references: [id])

  @@map("nurse")
}

// Staff Model
model Staff {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  password      String
  phone         Int
  address       String?
  profile_image String?
  role          String
  roomId        Int?
  room          Room?   @relation(fields: [roomId], references: [id])

  @@map("staff")
}

// Admin Model
model Admin {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  phone         Int
  password      String
  address       String?
  profile_image String?
  role          String

  @@map("admin")
}

model Service {
  id          Int    @id @default(autoincrement())
  serviceName String
  description String

  price       Float
  serviceType String // e.g., "Consultation", "Surgery", "Therapy"
  bodyPart    String // e.g., "Heart", "Lungs", "Skin"   
  doctor      Doctor[]
  appointment Appointment[]

  @@map("service")
}

enum appointmentStatus {
  requested
  scheduled
  completed
  cancelled
}

// Appointment Model
model Appointment {
  id              Int               @id @default(autoincrement())
  doctorId        Int
  patientId       Int
  price           Int   @default(500)
  appointmentDate DateTime
  status          appointmentStatus @default(requested)
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  patient         User              @relation(fields: [patientId], references: [id])
  prescription    String?
  serviceId       Int
  Service         Service           @relation(fields: [serviceId], references: [id])
  Billing         Billing[]
  Pharmacy        PharmacyOnAppointment[]
  LabAppointment  LabAppointment[]
  DiagnosticAppointment DiagnosticAppointment[]

  @@map("appointment")
}

model PharmacyOnAppointment {
  id           Int        @id @default(autoincrement())
  appointmentId Int
  pharmacyId    Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  pharmacy      Pharmacy    @relation(fields: [pharmacyId], references: [id])

  @@unique([appointmentId, pharmacyId]) // Ensures unique pair of appointment and pharmacy
}

model Room {
  id                Int     @id @default(autoincrement())
  roomNumber        String
  needNurseAndStaff Int
  nurses            Nurse[]
  staff             Staff[]

  @@map("room")
}

// AppointmentSlot Model
model AppointmentSlot {
  id          Int      @id @default(autoincrement())
  doctorId    Int
  date        DateTime
  isAvailable Boolean  @default(true)
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
}

// Prescription Model

// Medication Model
model Medication {
  id             Int    @id @default(autoincrement())
  name           String
  dosage         String
  prescriptionId Int

  @@map("medication")
}

model Notice {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  expiryDate String 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notice")
}

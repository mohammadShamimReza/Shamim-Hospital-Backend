// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password      String
  address       String?
  profile_image String?
  role          String
  appointments  Appointment[]

  @@map("user")
}

// Doctor Model
model Doctor {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  address          String?
  profile_image    String?
  role             String
  appointmentSlots AppointmentSlot[]
  departmentId     Int?
  department       Department?       @relation(fields: [departmentId], references: [id])
  appointments     Appointment[]

  @@map("doctor")
}

// Nurse Model
model Nurse {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  password      String
  address       String?
  profile_image String?
  roomId        Int?
  role          String
  room          Room?   @relation(fields: [roomId], references: [id])

  @@map("nurse")
}

// Staff Model
model Staff {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  password      String
  address       String?
  profile_image String?
  role          String
  roomId        Int?
  room          Room?   @relation(fields: [roomId], references: [id])

  @@map("staff")
}

// Admin Model
model Admin {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  password      String
  address       String?
  profile_image String?
  role          String

  @@map("admin")
}

// Appointment Model
model Appointment {
  id              Int           @id @default(autoincrement())
  doctorId        Int?
  patientId       Int
  appointmentDate DateTime
  prescriptionId  Int?
  doctor          Doctor?       @relation(fields: [doctorId], references: [id])
  patient         User?         @relation(fields: [patientId], references: [id])
  prescription    Prescription?
}

// Department Model
model Department {
  id      Int      @id @default(autoincrement())
  name    String
  doctors Doctor[]
  nurses  Int
  staff   Int
  room    Room[]

  @@map("department")
}

model Room {
  id           Int         @id @default(autoincrement())
  roomNumber   String
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  nurses       Nurse[]
  staff        Staff[]

  @@map("room")
}

// AppointmentSlot Model
model AppointmentSlot {
  id          Int      @id @default(autoincrement())
  doctorId    Int
  date        DateTime
  isAvailable Boolean  @default(true)
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
}

// Prescription Model
model Prescription {
  id            Int          @id @default(autoincrement())
  appointmentId Int          @unique
  medications   Medication[]
  notes         String?
  appointment   Appointment  @relation(fields: [appointmentId], references: [id])

  @@map("prescription")
}

// Medication Model
model Medication {
  id             Int          @id @default(autoincrement())
  name           String
  dosage         String
  prescriptionId Int
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])

  @@map("medication")
}


model Notice {
  id            Int           @id @default(autoincrement())
  title          String
  content        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  authorId       Int

  @@map("notice")
}